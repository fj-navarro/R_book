# Code Style

Even as a very new programmer, it’s a good idea to work on your code style. Using a consistent style makes it easier for others (including future-you!) to read your work and is particularly important if you need to get help from someone else.

A summary set of recommendations:

-   Always use **text files/text editor**.

-   **Indent** your code. Each indent should be a minimum of 4 spaces, and ideally 8 spaces.

-   **Limit the width** of your code. You can limit the width of your text editor so that the code you write doesn't fly off into the wilderness on the right hand side.

-   **Limit the length** of individual functions. A function should not take up more than one page of your editor (of course, this depends on the size of your monitor).## Names

## Names

Remember that variable names should use only lowercase letters, numbers, and `_`. Use `_`to separate words within a name.

As a general rule of thumb, it’s better to prefer **long**, descriptive names that are easy to understand rather than concise names that are fast to type.

In general, if you have a bunch of variables that are a variation on a theme, you’re better off giving them a common **prefix** rather than a common suffix because autocomplete works best on the start of a variable.

## Spaces

Put **spaces** on either side of mathematical operators apart from `^` (i.e. `+`, `-`, `==`, `<`, …), and around the assignment operator (`<-`).

*Example:*

``` r
# Strive for
z <- (a + b)^2 / d

# Avoid
z<-( a + b ) ^ 2/d
```

Don’t put spaces inside or outside parentheses for regular function calls. Always put a space after a comma, just like in standard English.

``` r
# Strive for
mean(x, na.rm = TRUE)

# Avoid
mean (x ,na.rm=TRUE)
```

## Pipes

`|>` should always have a space before it and should typically be the last thing on a line. This makes it easier to add new steps, rearrange existing steps, modify elements within a step, and get a sky view by skimming the verbs on the left-hand side.

``` r
# Strive for 
flights |>  
  filter(!is.na(arr_delay), !is.na(tailnum)) |> 
  count(dest)

# Avoid
flights|>filter(!is.na(arr_delay), !is.na(tailnum))|>count(dest)
```

If the function you’re piping into has **named arguments** (like `mutate()` or `summarize()`), put each argument on a new line. If the function doesn’t have named arguments (like `select()` or `filter()`), keep everything on one line unless it doesn’t fit, in which case you should put each argument on its own line.

``` r
# Strive for
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Avoid
flights |>
  group_by(
    tailnum
  ) |> 
  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())
```

After the first step of the pipeline, **indent** each line by **two spaces**. RStudio will automatically put the spaces in for you after a line break following a `|>` . If you’re putting each argument on its own line, indent by an extra two spaces. Make sure `)`is on its own line, and un-indented to match the horizontal position of the function name.

``` r
# Strive for 
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )
```

Be wary of writing very **long pipes**, say longer than **10-15 lines**. Try to break them up into smaller sub-tasks, giving each task an informative name.

The same basic rules that apply to the pipe also apply to **ggplot2**; just treat `+` the same way as `|>`.
