# Creating a ggplot

## Define a Plot Object

With **ggplot2**, you begin a plot with the function `ggplot()`, defining a plot object that you then add layers to.

The first argument of `ggplot()` is the **dataset** to use in the graph and so `ggplot(data = penguins)` creates an empty graph that is primed to display the penguins data, but since we haven’t told it how to visualize it yet, for now it’s empty (it's like an empty canvas you’ll paint the remaining layers of your plot onto).

*Example:*


```{r echo = FALSE}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
```

``` {r}
ggplot(data = penguins)
```

## Map the data

Next, we need to tell `ggplot()` how the information from our data will be visually represented. The `mapping` argument of the `ggplot()` function defines how variables in your dataset are mapped to visual properties (aesthetics) of your plot.

The `mapping` argument is always defined in the `aes()` function, and the `x` and `y`arguments of `aes()` specify which variables to map to the x and y axes.

*Example:*

``` {r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
```

Our empty canvas now has more structure – it’s clear where flipper lengths will be displayed (on the x-axis) and where body masses will be displayed (on the y-axis). But the penguins themselves are not yet on the plot. This is because we have not yet determine how to represent the observations from our dataframe on our plot.

## Represent the data

To do so, we need to define a `geom`: the geometrical object that a plot uses to represent data. These geometric objects are made available in ggplot2 with functions that start with `geom_`.

For example, bar charts use `geom_bar()`, line charts use `geom_line()`, boxplots use `geom_boxplot()`, scatterplots use `geom_point()`, and so on.

*Example:*

``` {r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point()
```

**Note:** One common problem when creating ggplot2 graphics is to put the `+` in the wrong place: it has to come at the end of the line, not the start.

You can **rewrite the previous plot** more concisely:

``` {r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```

Or using the pipe, `|>`:

``` {r}
penguins |> 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```

Now we have something that looks like what we might think of as a “scatterplot”.

## Add Aesthetics and Layers

You will we need to modify the aesthetic mapping, inside of `aes()`.

*Example:*

``` {r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point()
```

When a **categorical variable** is mapped to an aesthetic, ggplot2 will automatically assign a unique value of the aesthetic (here a unique color) to each unique level of the variable (each of the three species), a process known as scaling. ggplot2 will also add a **legend** that explains which values correspond to which levels.

Now let’s add **one more layer**: a **smooth curve** displaying the relationship between body mass and flipper length. Since this is a new geometric object representing our data, we will add **a new geom** as a layer on top of our point geom: `geom_smooth()`. And we will specify that we want to draw the line of best fit based on a linear model with `method = "lm"`.

*Example:*

``` {r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point() +
  geom_smooth(method = "lm")
```

Note that When aesthetic mappings are defined in ggplot(), at the **global level**, they’re passed down to each of the subsequent geom layers of the plot. However, each geom function in ggplot2 can also take a mapping argument, which allows for aesthetic mappings at the **local level** that are added to those inherited from the global level. Since we want points to be colored based on species but don’t want the lines to be separated out for them, we should specify `color = species` for `geom_point()` only.

*Example:*

``` {r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species)) +
  geom_smooth(method = "lm")
```

It’s generally not a good idea to represent information using only colors on a plot, as people perceive colors differently due to color blindness or other color vision differences. Therefore, in addition to color, we can also map species to the **shape aesthetic**.

*Example:*

``` {r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species, shape = species)) +
  geom_smooth(method = "lm")
```

## Improve Labels

And finally, we can improve the **labels** of our plot using the `labs()` function in a new layer:

-   `title`, adds a title.
-   `subtitle`, adds a subtitle to the plot.
-   `x`, is the x-axis label.
-   `y`, is the y-axis label.
-   `color` and `shape` define the label for the legend.

In addition, we can improve the color palette to be **colorblind safe** with the `scale_color_colorblind()` function from the **ggthemes package**.

*Example:*

``` {r}
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind()
```

## Save Your Plot

Once you’ve made a plot, you might want to get it out of R by saving it as an **image** that you can use elsewhere. That’s the job of `ggsave()`, which will save the plot most recently created to disk:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
ggsave(filename = "penguin-plot.png")
```

This will save your plot to your **working directory**.