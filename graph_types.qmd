# Types of Graphs

## Visualizing Categorical Variables

A variable is **categorical** if it can only take one of a **small set of values**.

### Bar Chart

To examine the **distribution of a categorical variable**, you can use a **bar chart**. The height of the bars displays **how many observations** occurred with each `x` value.

```{r message=FALSE}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
```

*Example:*

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar()
```

### Bar Plots

In **bar plots** of categorical variables with non-ordered levels, like the penguin species above, it’s often preferable to reorder the bars based on their **frequencies**. Doing so requires transforming the variable to a **factor** (how R handles categorical data) and then reordering the levels of that factor.

*Example:*

```{r}
ggplot(penguins, aes(x = fct_infreq(species))) +
  geom_bar()
```

## Visualizing Numerical Variables

A variable is numerical (or quantitative) if it can take on a wide range of numerical values, and it is sensible to add, subtract, or take averages with those values. Numerical variables can be **continuous or discrete**.

### Histogram

One commonly used visualization for distributions of **continuous variables** is a histogram.

*Example:*

```{r}
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 200)
```

A **histogram** divides the x-axis into equally spaced bins and then uses the height of a bar to display the number of observations that fall in each bin. In the graph above, the tallest bar shows that 39 observations have a body_mass_g value between 3,500 and 3,700 grams, which are the left and right edges of the bar.

You can set the width of the **intervals** in a histogram with the binwidth argument, which is measured in the units of the x variable.

*Example:*

```{r}
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 20)
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 2000)
```

An alternative visualization for distributions of numerical variables is a **density plot**. A density plot is a smoothed-out version of a histogram and a practical alternative, particularly for continuous data that comes from an underlying smooth distribution.

*Example:*

```{r}
ggplot(penguins, aes(x = body_mass_g)) +
  geom_density()
```

## Visualizing Relationships

To visualize a relationship we need to have at least two variables mapped to aesthetics of a plot.

### Numerical and Categorical Variable

You can use **side-by-side box plots**. A boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution. It is also useful for identifying potential outliers.

*Example:*

```{r}
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot()
```

Alternatively, we can make density plots with `geom_density()`.

*Example:*

```{r}
ggplot(penguins, aes(x = body_mass_g, color = species)) +
  geom_density(linewidth = 0.75)
```

Additionally, we can map species to both **color and fill** aesthetics and use the alpha aesthetic to add transparency to the filled density curves. This aesthetic takes values between 0 (completely transparent) and 1 (completely opaque). In the following plot it’s set to 0.5.

```{r}
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
  geom_density(alpha = 0.5)
```

### Two Categorical Variables

We can use **stacked bar plots** to visualize the relationship between two categorical variables. For example, the following two stacked bar plots both display the relationship between `island` and `species`, or specifically, visualizing the distribution of `species` within each `island`.

*Example:*

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar()
```

The following plot, a **relative frequency plot** created by setting `position = "fill"` in the `geom`, is more useful for comparing species distributions across islands since it’s not affected by the unequal numbers of penguins across the islands.

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(position = "fill")
```

In creating these bar charts, we map the variable that will be separated into bars to the `x` aesthetic, and the variable that will change the colors inside the bars to the `fill` aesthetic.

### Two Numerical Variables

A **scatterplot** is probably the most commonly used plot for visualizing the relationship between two numerical variables.

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```

### Three or More Variables

We can incorporate more variables into a plot by mapping them to additional aesthetics. For example, in the following **scatterplot** the colors of points represent `species` and the shapes of points represent `islands`.

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = island))
```

### Facets

Adding too many aesthetic mappings to a plot makes it cluttered and difficult to make sense of. Another way, which is particularly useful for categorical variables, is to split your plot into **facets**, subplots that each display one subset of the data.

To facet your plot by a single variable, use `facet_wrap()`. The first argument of `facet_wrap()` is a formula3, which you create with `~` followed by a variable name. The variable that you pass to `facet_wrap()` should be categorical.

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species)) +
  facet_wrap(~island)
```

If you don’t specify the `width` and `height` they will be taken from the dimensions of the current plotting device. For reproducible code, you’ll want to specify them.

## Visualizing Maps

### Coordinates on a Map

*Example:*

```{r message=FALSE}
library(tidyverse)
library(sf)
library(mapview)
library(modeldata)

data(ames)

ames |>
  select(Longitude, Latitude, Neighborhood) |>
  # glimpse() |> 
  mapview(map.types = "OpenStreetMap",
          xcol = "Longitude", ycol = "Latitude", 
          zcol = "Neighborhood", 
          crs = 4269, 
          grid = FALSE)
```

You can find more information [here](https://r-spatial.github.io/mapview/articles/mapview_01-basics.html)

### Maps silhouettes

*Example*

```{r message = FALSE}
library(maps)

nz <- map_data("nz")

ggplot(nz, aes(x = long, y = lat, group = group)) +
  geom_polygon(fill = "white", color = "black")

ggplot(nz, aes(x = long, y = lat, group = group)) +
      geom_polygon(fill = "white", color = "black") +
      coord_quickmap()
```
