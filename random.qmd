# Random Numbers

Simulation is an important (and big) topic for both statistics and for a variety of other areas where there is a need to introduce randomness. 

Sometimes you want to implement a statistical procedure that requires random number generation or sample (i.e. Markov chain Monte Carlo, the bootstrap, random forests, bagging) and sometimes you want to simulate a system and random number generators can be used to model random inputs.

Some example functions for probability distributions in R:

``` R
rnorm(n, mean = 0, sd = 1) ## generate random Normal variates with a given mean and standard deviation
dnorm(x, mean = 0, sd = 1, log = FALSE) ## evaluate the Normal probability density (with a given mean/SD) at a point (or vector of points)
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)  ## evaluate the cumulative distribution function for a Normal distribution
qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) ## generate random Poisson variates with a given rate
```
Maybe the most common probability distribution to work with is the Normal distribution (also known as the Gaussian).  

```{r}
x <- rnorm(10, 20, 2) 
summary(x)
```

## Always Remember to Set Your Seed!

When simulating any random numbers it is essential to set the random number seed. Setting the random number seed with `set.seed()` ensures reproducibility of the sequence of random numbers.

```{r}
set.seed(1)
rnorm(5)
```

*Example: Simulating a Linear Model*

For that we need to specify the model and then simulate from it using the functions described above.

Suppose we want to simulate from the following linear model y = β0 + β1x + ε where ε ∼ N(0, 22)

Assume x ∼ N(0, 12), β0 = 0.5 and β1 = 2. The variable x might represent an important predictor of the outcome y.

Here's how we could do that in R:

```{r}
## Always set your seed! 
set.seed(20) 
## Simulate predictor variable 
x <- rnorm(100) 
## Simulate the error term 
e <- rnorm(100, 0, 2) 
## Compute the outcome via the model 
y <- 0.5 + 2 * x + e 
summary(y)
plot(x, y)
```

## Random Sampling

The `sample()` function draws randomly from a specified set of (scalar) objects allowing you to sample from arbitrary distributions of numbers.

```{r}
set.seed(1)
sample(1:10,4)
```

```{r}
## Doesn't have to be numbers
sample(letters, 5)
```

To sample more complicated things, such as rows from a data frame or a list, you can sample the indices into an object rather than the elements of the object itself:

```{r}
set.seed(20)
idx <- seq_len(nrow(airquality))## Create index vector 
samp <- sample(idx, 6) ##Sample from the index vector 
airquality[samp, ]
```
